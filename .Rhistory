black = sum(Black))
la22 %>% group_by(School.System.Name) %>%
summarize(kinder = sum(Kindergarten),
first = sum(Grade1),
second = sum(Grade2))
la22 %>% group_by(School.System.Name) %>%
summarize(kinder = sum(Kindergarten),
first = sum(Grade1),
second = sum(Grade2)) %>%
arrange(-kinder)
la22 %>% group_by(School.System.Name) %>%
summarize(kinder = sum(Kindergarten),
first = sum(Grade1),
second = sum(Grade2)) #%>%
la22 %>% group_by(School.System.Name) %>%
summarize(kinder = sum(Kindergarten),
first = sum(Grade1),
second = sum(Grade2)) %>%
arrange(-kinder)
la22 %>% group_by(School.System.Name) %>%
summarize(kinder = sum(Kindergarten),
first = sum(Grade1),
second = sum(Grade2)) %>%
arrange(-kinder) %>%
View()
la22 %>% group_by(School.System.Name) %>%
summarize(kinder = sum(Kindergarten),
first = sum(Grade1),
second = sum(Grade2)) %>%
arrange(-Kindergarten) %>%
View()
la22 %>% group_by(School.System.Name) %>%
summarize(kinder = sum(Kindergarten),
first = sum(Grade1),
second = sum(Grade2)) %>%
arrange(-kinder) %>%
View()
la22 %>% select(SiteName, Parish.Code, Kindergarten, Nonprofit, ED.) %>%
# filter(Parish.Code == 36) %>%
# mutate(pct_disadvantaged = ED. * 100) %>%
# group_by(Nonprofit) %>%
# summarize(total_kinder = sum(Kindergarten),
#            median_ed = median(pct_disadvantaged)) %>%
# arrange(-total_kinder) %>%
View()
la22 %>% select(SiteName, Parish.Code, Kindergarten, Nonprofit, ED.) %>%
filter(Parish.Code == 36) %>%
# mutate(pct_disadvantaged = ED. * 100) %>%
# group_by(Nonprofit) %>%
# summarize(total_kinder = sum(Kindergarten),
#            median_ed = median(pct_disadvantaged)) %>%
# arrange(-total_kinder) %>%
View()
la22 %>% select(SiteName, Parish.Code, Kindergarten, Nonprofit, ED.) %>%
filter(Parish.Code == 36) %>%
mutate(pct_disadvantaged = ED. * 100) %>%
# group_by(Nonprofit) %>%
# summarize(total_kinder = sum(Kindergarten),
#            median_ed = median(pct_disadvantaged)) %>%
# arrange(-total_kinder) %>%
View()
la22 %>% select(SiteName, Parish.Code, Kindergarten, Nonprofit, ED.) %>%
filter(Parish.Code == 36) %>%
mutate(pct_disadvantaged = ED. * 100) %>%
group_by(Nonprofit) %>%
# summarize(total_kinder = sum(Kindergarten),
#            median_ed = median(pct_disadvantaged)) %>%
# arrange(-total_kinder) %>%
View()
la22 %>% select(SiteName, Parish.Code, Kindergarten, Nonprofit, ED.) %>%
filter(Parish.Code == 36) %>%
mutate(pct_disadvantaged = ED. * 100) %>%
group_by(Nonprofit) %>%
summarize(total_kinder = sum(Kindergarten),
median_ed = median(pct_disadvantaged)) %>%
# arrange(-total_kinder) %>%
View()
la22 %>% select(SiteName, Parish.Code, Kindergarten, Nonprofit, ED.) %>%
filter(Parish.Code == 36) %>%
mutate(pct_disadvantaged = ED. * 100) %>%
group_by(Nonprofit) %>%
summarize(total_kinder = sum(Kindergarten),
median_ed = median(pct_disadvantaged),
total_schools = n()) %>%
# arrange(-total_kinder) %>%
View()
la22 %>% select(SiteName, Parish.Code, Kindergarten, Nonprofit, ED.) %>%
filter(Parish.Code == 36) %>%
mutate(pct_disadvantaged = ED. * 100) %>%
group_by(Nonprofit) %>%
summarize(total_kinder = sum(Kindergarten),
median_ed = median(pct_disadvantaged),
total_schools = n()) %>%
arrange(-total_kinder) %>%
View()
la22 %>% select(SiteName, Parish.Code, Kindergarten, Nonprofit, ED.) %>%
filter(Parish.Code == 36) %>%
mutate(pct_disadvantaged = ED. * 100) %>%
group_by(Nonprofit) %>%
summarize(total_kinder = sum(Kindergarten),
median_ed = median(pct_disadvantaged),
total_schools = n()) %>%
arrange(-total_kinder) %>%
View()
View(la22)
la22 %>% filter(str_detect(SiteName, "Juvenile Detention" | "Correction")) %>% View()
la22 %>% filter(str_detect(SiteName, "Juvenile Detention") |
str_detect(SiteName, "Correctional") ) %>% View()
la22 %>% filter(str_detect(SiteName, "Juvenile Detention") |
str_detect(SiteName, "Correctional") ) %>%
select(SiteName, ED.)
la22 %>% filter(str_detect(SiteName, "Detention") |
str_detect(SiteName, "Correctional") ) %>%
select(SiteName, ED.)
0.417 * 12
condition_1 = str_detect(SiteName, "Detention")
kinder_summary = la22 %>% select(SiteName, Parish.Code, Kindergarten, Nonprofit, ED.) %>%
filter(Parish.Code == 36) %>%
mutate(pct_disadvantaged = ED. * 100) %>%
group_by(Nonprofit) %>%
summarize(total_kinder = sum(Kindergarten),
median_ed = median(pct_disadvantaged),
total_schools = n()) %>%
arrange(-total_kinder) %>%
ungroup()
View(kinder_summary)
View(la22)
View(kinder_summary)
grades = read_excel("./data/2022-school-performance-scores.xlsx", skip=3) %>%
slice(1:1174)
View(grades)
grades = read_excel("./data/2022-school-performance-scores.xlsx") #%>%
View(grades)
grades = read_excel("./data/2022-school-performance-scores.xlsx", skip=3) #%>%
grades = read_excel("./data/2022-school-performance-scores.xlsx", skip=3) %>%
slice(1:1174)
#Select first six columns for simplicity and clean up the column names
grades = grades %>% select(1:6)
colnames(grades) = c("site_code", "school", "school_system", "school_type", "grade", "sps")
View(la22)
merged = left_join(la22, grades, by=c("SiteCd"="site_code"))
View(merged)
#A right_join will do the reverse
merged = right_join(la22, grades, by=c("SiteCd"="site_code"))
#An inner_join will only keep the rows that both sides have in common
merged = inner_join(la22, grades, by=c("SiteCd"="site_code"))
#A full_join will keep all rows on both sides
merged = full_join(la22, grades, by=c("SiteCd"="site_code"))
#An anti_join will only keep the rows that both sides DON'T have in common
anti_join(grades, la22, by=c("site_code"="SiteCd"))
anti_join(la22, grades, by=c("SiteCd"="site_code"))
idea_3_to_5 = read_excel("./data/2021-bchildcountandedenvironment-2.xlsx", skip=8) %>%
slice(1:61)
idea_6_to_21 = read_excel("./data/2021-bchildcountandedenvironment-3.xlsx", skip=8) %>%
slice(1:61)
View(idea_3_to_5)
View(idea_6_to_21)
idea_3_to_5$age_range = "3-5"
idea_6_to_21$age_range = "6-21"
idea = rbind(idea_3_to_5, idea_6_to_21)
View(idea)
fips = read_csv("./data/state_fips.csv")
View(fips)
View(fips)
left_join(idea, fips, by=c("State"="Name")) %>% View()
idea = left_join(idea, fips, by=c("State"="Name"))
idea %>% select(-`Postal Code`)
idea %>% select(-`Postal Code`) %>% View()
idea_3_to_5 = read_excel("./data/2021-bchildcountandedenvironment-2.xlsx", skip=8) %>%
slice(1:61)
idea_6_to_21 = read_excel("./data/2021-bchildcountandedenvironment-3.xlsx", skip=8) %>%
slice(1:61)
idea_3_to_5$age_range = "3-5"
idea_6_to_21$age_range = "6-21"
idea = rbind(idea_3_to_5, idea_6_to_21)
fips = read_csv("./data/state_fips.csv")
idea = left_join(idea, fips, by=c("State"="Name"))
library(tidyverse)
library(readxl)
library(ggplot2)
la22 = read_excel("./data/louisiana_enrollment/oct-2022-multi-stats-(total-by-site-and-school-system).xlsx", sheet=2, skip=5)
colnames(la22) = make.names(colnames(la22))
enrollment_by_race = la22 %>% group_by(School.System.Name) %>%
summarize(amind = sum(AmInd),
asian = sum(Asian),
black = sum(Black),
white = sum(White),
hispanic = sum(Hispanic),
hawaiian = sum(HawPI),
multiple = sum(Multiple),
minority = sum(Minority))
enrollment_by_race
enrollment_by_race %>% View()
race_wide = la22 %>% select(School.System.Name, SiteName, AmInd:Minority)
race_long = la22 %>% select(School.System.Name, SiteName, AmInd:Minority) %>%
pivot_longer(cols = AmInd:Minority,
names_to="race",
values_to="enrollment")
View(race_wide)
View(race_long)
enrollment_by_race = race_long %>% group_by(School.System.Name, race) %>%
summarize(total = sum(enrollment))
View(enrollment_by_race)
enrollment_by_race %>% pivot_wider(names_from = "race", values_from="total") %>% View()
race_wide = la22 %>% select(School.System.Name, SiteName, AmInd:Minority)
race_long = la22 %>% select(School.System.Name, SiteName, AmInd:Minority) %>%
pivot_longer(cols = AmInd:Minority,
names_to="race",
values_to="enrollment")
enrollment_by_race = race_long %>% group_by(School.System.Name, race) %>%
summarize(total = sum(enrollment))
View(enrollment_by_race)
enrollment_by_race %>% pivot_wider(names_from = "race", values_from="total") %>% View()
??pivot_longer
df = read_csv("./data/district_MO_construction_SY15_to_SY19.csv", skip=6)
View(df)
#Make the headers easier to deal with
colnames(df) = make.names(colnames(df))
colnames(df)
colnames(df) = colnames(df) %>%
str_replace_all(pattern="\\.+", replacement="_")
colnames(df)
colnames(df) = colnames(df) %>%
str_replace("_All_Grades_Excludes_AE_District","") %>%
str_replace("_Supp_Serv_Exp_V40_District_Finance","") %>%
str_replace("_Capital_Outlay_F12_District_Finance","")
colnames()
colnames(df)
df = rename(df, State=State_Name_District_Latest_available_year,
NCES=Agency_ID_NCES_Assigned_District_Latest_available_year)
colnames(df)
df = rename(df, Agency=Agency_Name)
#Instead, use drop_na() to drop all rows that are NA within the column "NCES."
df = df %>% drop_na("NCES")
unique(df$Agency_Type_District_2018_19)
df %>% count(Agency_Type_District_2018_19)
df[df == "†"]
#One option: Replace all cells that are just "†" to NA
df[df == "†"] <- NA
df = df %>% mutate_at(c(8:ncol(df)), as.numeric)
df = df %>% mutate_at(8:ncol(df), as.numeric)
df = df %>% filter(if_all(starts_with("Total_Students"), ~ .x >= 100))
df %>% count(Agency_Type_District_2018_19)
#Let's check if any districts are duplicated; we would want to filter them out if they were.
subset(df,duplicated(NCES))
#Let's check if any districts are duplicated; we would want to filter them out if they were.
subset(df,duplicated("NCES"))
#Instead, use drop_na() to drop all rows that are NA within the column "NCES."
df = df %>% drop_na(NCES)
df = read_csv("./data/district_MO_construction_SY15_to_SY19.csv", skip=6)
#Make the headers easier to deal with
colnames(df) = make.names(colnames(df))
colnames(df) = colnames(df) %>%
str_replace_all(pattern="\\.+", replacement="_")
colnames(df) = colnames(df) %>%
str_replace("_All_Grades_Excludes_AE_District","") %>%
str_replace("_Supp_Serv_Exp_V40_District_Finance","") %>%
str_replace("_Capital_Outlay_F12_District_Finance","")
df = df %>% rename(State=State_Name_District_Latest_available_year,
NCES=Agency_ID_NCES_Assigned_District_Latest_available_year)
df = rename(df, Agency=Agency_Name)
#We could do this
df %>% slice(1:20467)
#Instead, use drop_na() to drop all rows that are NA within the column "NCES."
df = df %>% drop_na(NCES)
unique(df$Agency_Type_District_2018_19)
df %>% count(Agency_Type_District_2018_19)
#The data also tells us if all the schools in a district are charter, noncharter or both.
unique(df$Agency_Charter_Status_District_2017_18)
#One option: Replace all cells that are just "†" to NA
df[df == "†"] <- NA
df = df %>% mutate_at(8:ncol(df), as.numeric)
df = df %>% filter(if_all(starts_with("Total_Students"), ~ .x >= 100))
df %>% count(Agency_Type_District_2018_19)
#Let's check if any districts are duplicated; we would want to filter them out if they were.
subset(df,duplicated(NCES))
poverty = read_excel('./data/ussd20.xls', skip=2)
View(poverty)
#This dataset also needs to be cleaned up a bit.
#Create new column names
colnames(poverty) = c("state","state_fips","district_ID", "name", "total_pop", "pop_5to17", "pop_5to17_in_poverty")
poverty = poverty %>% mutate(NCES=paste0(state_fips, district_ID))
colnames(poverty)
#Create a column called pct_children_in_poverty
poverty$pct_children_in_poverty = poverty$pop_5to17_in_poverty / poverty$pop_5to17 * 100
df = left_join(df, poverty, by="NCES")
df %>% filter(is.na(pct_children_in_poverty)) %>% count(Agency_Type_District_2018_19)
#Filter to include only the districts where pct_children_in_poverty is NOT N/A
df = df %>% filter(!is.na(pct_children_in_poverty))
df %>% count(Agency_Type_District_2018_19)
df$five_year_totals_ops = df %>% select(starts_with("Total_Ops")) %>% rowSums(.)
df$five_year_totals_construction = df %>% select(starts_with("Construction")) %>% rowSums(.)
df$five_year_totals_students = df %>% select(starts_with("Total_Students")) %>% rowSums(.)
#Let's go with within-state poverty quintile for each state (supported by the literature: https://www.barbarabiasi.com/uploads/1/0/1/2/101280322/pp_schoolconstruction.pdf)
#Remember, quintile 1 is richest and quintile 5 is poorest
df = df %>% group_by(state) %>%
mutate(state_poverty_quintile=ntile(pct_children_in_poverty, 5)) %>%
ungroup()
df %>% filter(State == "Mississippi" | State == "Connecticut") %>%
group_by(State, state_poverty_quintile) %>%
summarize(lower_bound = min(pct_children_in_poverty),
upper_bound=max(pct_children_in_poverty))
#What do school districts spend on maintenance and operation every year, by poverty level?
df %>% group_by(state_poverty_quintile) %>%
summarize(mo=sum(five_year_totals_ops),
students=sum(five_year_totals_students)) %>%
mutate(mo_per_student = mo/students)
#What do school districts spend on maintenance and operation every year, by poverty level?
df %>% group_by(state_poverty_quintile) %>%
summarize(mo=sum(five_year_totals_ops, na.rm=T),
students=sum(five_year_totals_students, na.rm=T)) #%>%
#What do school districts spend on maintenance and operation every year, by poverty level?
df %>% group_by(state_poverty_quintile) %>%
summarize(mo=sum(five_year_totals_ops, na.rm=T),
students=sum(five_year_totals_students, na.rm=T)) %>%
mutate(mo_per_student = mo/students)
colnames(dfd)
colnames(df)
df %>% group_by(state_poverty_quintile) %>%
summarize(co=sum(five_year_totals_construction, na.rm=T),
students=sum(five_year_totals_students, na.rm=T)) %>%
mutate(co_per_student = co/students)
fruit
#Say we want to print out the name of each fruit, one at a time...
print("apple")
print("apricot")
print("avocado")
for (f in fruit) {
print(f)
}
for (f in fruit) {
f = toupper(f)
print(paste0("I like to eat ", f,"S!"))
}
for (f in fruit) {
f = toupper(f)
print(paste0("I like to eat", f,"S!"))
}
print(paste("I like to eat", f,"S!"))
for (f in fruit) {
f = toupper(f)
print(paste0("I like to eat ", f,"S!"))
}
#You can also specify a range of numbers
for (i in 1:5) {
print(i)
}
print(i*10)
#You can also specify a range of numbers
for (i in 1:5) {
print(i*10)
}
for (f in fruit[1:5]) {
f = toupper(f)
print(paste0("I like to eat ", f,"S!"))
}
for (i in 1:length(fruit)) {
print(i)
}
for (i in 1:5) {
print(paste0("I ate", i*10, "fruits"))
}
for (i in 1:5) {
print(paste0("I ate ", i*10, " fruits"))
}
print(paste("I ate", i*10, "fruits"))
for (i in 1:5) {
print(paste("I ate", i*10, "fruits"))
}
files = list.files("./data/louisiana_enrollment/")
files
print(f)
#Go through each file in the list of files and print its name.
for (f in files) {
print(f)
}
#Go through each file in the list of files and print its name.
for (f in files) {
print(f)
}
#Go through each file in the list of files and print its name, then create a dataframe.
for (f in files) {
filepath = paste0("./data/louisiana_enrollment/", f)
print(filepath)
#  df = read_excel(filepath, skip=5)
}
#Go through each file in the list of files and print its name, then create a dataframe.
for (f in files) {
filepath = paste0("./data/louisiana_enrollment/", f)
print(filepath)
df = read_excel(filepath, skip=5)
}
View(df)
la_grades = data.frame()
View(la_grades)
View(la_grades)
for (f in files) {
filepath = paste0("./data/louisiana_enrollment/", f)
print(filepath)
df = read_excel(filepath, skip=5)
la_grades = rbind(la_grades, df)
}
la_grades = data.frame()
for (f in files) {
filepath = paste0("./data/louisiana_enrollment/", f)
print(filepath)
df = read_excel(filepath, skip=5) %>%
filter(`School System Name`=="Statewide total") %>%
select(PreK:Grade12) %>%
pivot_longer(PreK:Grade12, names_to="grade", values_to="enrollment") %>%
filter(grade != "GradeT9")
df$census_date = str_extract(filepath,"oct-20..") #extracts "oct-20" and then the two following characters
la_grades = rbind(la_grades, df)
}
View(la_grades)
View(la_grades)
la_grades = data.frame()
for (f in files) {
filepath = paste0("./data/louisiana_enrollment/", f)
print(filepath)
df = read_excel(filepath, skip=5) %>%
filter(`School System Name`=="Statewide total" | `School System Name`=="Totals") %>%
select(PreK:Grade12) %>%
pivot_longer(PreK:Grade12, names_to="grade", values_to="enrollment") %>%
filter(grade != "GradeT9")
df$census_date = str_extract(filepath,"oct-20..")
la_grades = rbind(la_grades, df)
}
View(la_grades)
la_grades = la_grades %>%
arrange(grade) %>%
mutate(previous_year_value = case_when(
census_date == "oct-2017" ~ NA_real_,
TRUE  ~ lag(enrollment, order_by=grade),
))
la_grades = la_grades %>%
arrange(grade) %>%
mutate(previous_year_value = case_when(
census_date == "oct-2017" ~ NA,
TRUE  ~ lag(enrollment, order_by=grade),
))
??lag
#Mutate to calculate year-over-year changes
la_grades = la_grades %>%
mutate(yoy_change = (enrollment-previous_year_value)/previous_year_value*100)
#Round year-over-year change to two decimal places
la_grades = la_grades %>% mutate(yoy_change = round(yoy_change, 2))
View(la_grades)
#Let's start with a simple bar graph for one year.
la22 = la_grades %>% filter(census_date=="oct-2022")
ggplot(data=la22, aes(x=grade, y=enrollment)) +
geom_bar(position="dodge", stat="identity")
glimpse(la_grades)
grade_order = c("PreK", "Kindergarten", "Grade1", "Grade2", "Grade3", "Grade4", "Grade5", "Grade6", "Grade7", "Grade8", "Grade9", "Grade10", "Grade11", "Grade12")
la22$grade = factor(la22$grade, levels=grade_order)
glimpse(la22)
#Now we can make a bar char in the right order
ggplot(la22, aes(x=grade, y=enrollment)) +
geom_bar(stat="identity")
#Bar plot, enrollment in each grade over time. We specify fill=census_date so there will be a bar of a different color for each date.
ggplot(la_grades,aes(x=grade, y=enrollment, fill=census_date)) +
geom_bar(stat="identity")
#It's stacking each year on top of each other instead of stacking them next to each other. Specify position="dodge" to avoid this problem.
ggplot(la_grades,aes(x=grade, y=enrollment, fill=census_date)) +
geom_bar(position="dodge", stat="identity")
glimpse(la_grades)
#Let's refactor the entire la_grades dataframe as well.
la_grades$grade = factor(la_grades$grade, levels=grade_order)
glimpse(la_grades)
#Let's change the colors
ggplot(la_grades,aes(x=grade, y=enrollment, fill=census_date)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Purples")
ggplot(la_grades,aes(fill=grade, y=enrollment, x=grade)) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(~ census_date)
#To flip the X and Y axis so we have horizontal bars, use coord_flip()
ggplot(la_grades,aes(fill=grade, y=enrollment, x=grade)) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(~ census_date) +
coord_flip()
#Let's say we wanted line charts instead of bar graphs. Sometimes having just a simple line cuts out distracting visual information.
#Make a line chart for just 2022:
ggplot(la22, aes(x=grade, y=enrollment, group=1)) +
geom_line()
#Same line plot, but with a dot for each grade
ggplot(la22, aes(x=grade, y=enrollment, group=1)) +
geom_line() +
geom_point()
ggplot(la_grades, aes(x=grade, y=enrollment, group=census_date)) +
geom_line()
#Let's have all the lines be different colors
ggplot(la_grades, aes(x=grade, y=enrollment, group=census_date, color=census_date)) +
geom_line()
ggplot(la_grades,aes(group=census_date, y=enrollment, x=grade)) +
geom_line() +
facet_wrap(~ census_date)
#Look at the trend for each grade
ggplot(la_grades,aes(group=grade, y=enrollment, x=census_date)) +
geom_line() +
facet_wrap(~ grade)
#Graph percent change, with small multiples of years
la_grades %>% filter(census_date !="oct-2017") %>%
ggplot(aes(fill=grade, y=yoy_change, x=grade)) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(~ census_date)
#Graph percent change, with small multiples of grades
la_grades %>% filter(census_date !="oct-2017") %>%
ggplot(aes(fill=census_date, y=yoy_change, x=census_date)) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(~ grade) +
coord_flip()
