View(df)
View(df)
#You can select a column by typing the name of the dataframe, then $, then the column name
df$last
df['last']
df.last
#You can select a column by typuing df$columnname or df['columnname']
df$last
#You can select a column by typuing df$columnname or df['columnname']
df$last[1]
df['last'][1]
df['last'][2]
df['first','last']
df[c('first','last')]
df$last[1]
#The advantage of the first way of writing a column is that you can then also subset it by rows.
df$last[1:3]
#The advantage of the second way is that you can select multiple columns
df[1:3, c('first','last')]
#You can also select by number. The format is: df[rownumber, columnnumber]
#Example: Row 1, Column 2
df[1,2]
#Everything in row 1
df[1,] #Notice there's a comma, then the column number is blank
#There are four ways to get everything in column 3:
df[,3]
df[3]
df['org']
df$org
#To get everything EXCEPT column 3:
df[-3]
#Everything EXCEPT row 1:
df[-1,]
df[4]
df[2,2]
df[5,]
nrow(df)
ncol(df)
df[nrow(),]
df[nrow(df),]
df[-nrow(df),]
#To grab multiple columns, you can put in a number range:
df[2:3]
#What if you need to grab columns 1, 2, and 5?
df[c(1:2, 5)]
df[c('first', 'last', 'age')]
#Let's have a summary of this dataframe
summary(df)
summary(df)
summary(df)
df$zip_code = as.character(df$zip_code)
#First, though, you have to figure out: where I am? Find the working directory.
getwd()
#First, though, you have to figure out: where I am? Find the working directory.
getwd()
#This code should work if your working directory is in the right place
#Display all the files in the data folder:
list.files("./data/")
#Display all the files in the sc_teacher_demographics folder:
list.files("./data/sc_teacher_demographics")
#To read a CSV, use the function read.csv()
construction_csv = read.csv(file="./data/district_MO_construction_SY15_to_SY19.csv")
View(construction_csv)
construction_csv = read.csv(file="./data/district_MO_construction_SY15_to_SY19.csv", skip=6)
View(construction_csv)
#You only have to install.packages() once. However, you need to go to the library() to load them every time you run a new script.
library(tidyverse)
library(readxl)
sc21 = read_excel("./data/sc_teacher_demographics/SOUTH CAROLINA TEACHERS BY RACE AND GENDER BY SCHOOL DISTRICT (PRELIMINARY REPORT), 2020-21.xlsx")
list.files("./data/sc_teacher_demographics/")
#The tidyverse has a nifty function called glimpse() that lets us quickly see all of our columns and what type they are
glimpse(sc21)
View(sc21)
sc21 = drop_na(sc21)
sc21 = drop_na(sc21)
#Let's say we want a column with the total number of white teachers. We will call this column total_whites.
#We can make this column simply by using plus signs to add the three columns that count white teachers.
sc21$total_whites = sc21$`WHITE MALES` +
sc21$`WHITE FEMALES` +
sc21$`WHITE GENDER NOT REPORTED`
sc21 %>% View() #Same as View(sc21)
#Grab the first 10 rows
sc21 %>% slice_head(n=10)
sc21 %>% slice_tail(n=10)
#Grab a random sample of 10 rows
sc21 %>% slice_sample(n=10)
#Grab the 25% of rows that have the lowest share of white teachers
sc21 %>% slice_min(pct_white, prop=0.25) %>% View()
sc21 = read_excel("./data/sc_teacher_demographics/SOUTH CAROLINA TEACHERS BY RACE AND GENDER BY SCHOOL DISTRICT (PRELIMINARY REPORT), 2020-21.xlsx") %>%
drop_na() %>%
mutate(total_whites = `WHITE MALES` + `WHITE FEMALES` + `WHITE GENDER NOT REPORTED`,
pct_white = total_whites/`TOTAL NUMBER OF TEACHERS`*100)
sc21 %>% View() #Same as View(sc21)
#Tidyverse also allows us to grab rows using the slice() function. Examples: grab rows 2 to 5
#Base R way
sc21[2:5,]
#Tidyverse way
sc21 %>% slice(2:5)
#Grab the first 10 rows
sc21 %>% slice_head(n=10)
#Grab a random sample of 10 rows
sc21 %>% slice_sample(n=10)
#Grab the 25% of rows that have the lowest share of white teachers
sc21 %>% slice_min(pct_white, prop=0.25) %>% View()
View(construction_csv)
library(tidyverse)
library(readxl)
#Tab 2 of this file shows the enrollment information for each school in Louisiana as of October 2022.
la22 = read_excel("./data/louisiana_enrollment/oct-2022-multi-stats-(total-by-site-and-school-system).xlsx", sheet=2, skip=5)
#Filter the data so that it only includes schools that are run by the FirstLine Schools nonprofit
la22 %>% filter(Nonprofit == "FirstLine Schools, Inc.")
View(la22)
#Filter the data so that it only includes schools that are run by the FirstLine Schools nonprofit
la22 %>% filter(Nonprofit == "FirstLine Schools, Inc.") %>% View()
#Filter for the school that has the Site Code 026075
la22 %>% filter(SiteCd == "026075")
#Let's say we want every school EXCEPT FirstLine schools. != means "does not equal"
la22 %>%
filter(Nonprofit != "FirstLine Schools, Inc.")
#Let's say we want every school EXCEPT FirstLine schools. != means "does not equal"
la22 %>%
filter(Nonprofit != "FirstLine Schools, Inc.") %>% View()
#Filter for the school that has the Site Code 026075
la22 %>% filter(SiteCd == "026075")
#Filter for the school that has the Site Code 026075
la22 %>% filter(SiteCd == "026075") %>% View()
#Filter for schools with more than 100 kindergarteners
la22 %>% filter(Kindergarten > 200)
#Filter for only schools in New Orleans (which has Parish Code 36)
la22 %>% filter(`Parish Code` == 36)
#Filter for schools that are more than 30% students with limited-English proficiency (LEP)
la22 %>% filter(`%LEP` > 0.3)
colnames(la22)
colnames(la22) = make.names(colnames(la22))
colnames(la22)
#Filter for only schools that are NOT in New Orleans
la22 %>% filter(Parish.Code != 36)
#Filter and then count how many schools are run by each nonprofit
la22 %>% filter(Parish.Code == 36) %>% count(Nonprofit) %>% View()
#Use arrange() to sort the data
la22 %>% filter(Parish.Code == 36) %>% count(Nonprofit) %>%
arrange(n) %>% View()
#Arrange be default puts the smallest values on top. Put a minus sign before the column name to reverse this.
la22 %>% filter(Parish.Code == 36) %>% count(Nonprofit) %>%
arrange(-n) %>% View()
#Filter for schools that are in New Orleans AND a Type 1 charter
la22 %>% filter(Parish.Code == 36 & Charter.Type == "Type 1")
#You can combine multiple filters with and/or operators
#Filter for schools that are in New Orleans AND a Type 1 charter with the "&" operator
la22 %>% filter(Parish.Code == 36 & Charter.Type == "Type 1")
#Filter for schools that are in New Orleans OR a Type 1 charter with the "|" operator
la22 %>% filter(Parish.Code == 36 | Charter.Type == "Type 1")
#Use %in% to filter based on a list
#Filter for schools in the New Orleans suburbs
suburbs = c("Jefferson Parish", "St. Bernard Parish", "St. Tammany Parish", "Plaquemines Parish")
la22 %>% filter(School.System.Name %in% suburbs)
#Filter for suburbs then arrange by total students -- smallest schools on top
la22 %>% filter(School.System.Name %in% suburbs) %>%
arrange(Total.Students)
#Filter for schools with more than 80 and fewer than 100 kindergarteners
la22 %>% filter(Kindergarten > 80 & Kindergarten <100)
str_detect(string=la22$SiteName, pattern="Elementary School")
#Filter for all rows where the school has "Elementary School" in the name
#We use str_detect which detects a pattern within a string. It returns TRUE if the pattern is detected or FALSE if it is not.
str_detect(string=la22$SiteName, pattern="Elementary School")
#When combined with filter, it keeps all rows that returned a TRUE value
la22 %>% filter(str_detect(SiteName, "Elementary School"))
la22 %>% arrange(-Kindergarten) %>% slice_head(n=5)
#Filter for schools with greater than average number share of students with limited English proficiency (LEP)
#mean() is used to find the average (note: our data has no NA's; we'll see later how to modify the code when there are NA's)
mean(la22$X.LEP)
la22 %>% filter(X.LEP > mean(X.LEP)) %>% View()
#Select site name and total number of students
la22 %>% select(SiteName, Total.Students)
la22 %>% select(5,6)
#Select site name and all columns from "AmInd" to "Minority"
la22 %>% select(SiteName, AmInd:Minority)
la22 %>% select(5, 9:16)
#Select everything EXCEPT the site name
la22 %>% select(-SiteName)
#Columns can be selected in any order
la22 %>% select(Parish.Code, SiteName, School.System.Name)
#This can be useful for rearranging the data
#Put the school name first, then everything else
la22 %>% select(SiteName, everything())
#Selection helpers allow you to select columns that start with, end with, or contain certain string
la22 %>% select(starts_with("Grade"))
la22 %>% select(starts_with("School"))
la22 %>% select(contains("X."))
la22 %>% select(contains("male"))
la22 %>% select(contains("X"))
la22 %>% select(contains("X.+"))
la22 %>% select(contains("X."))
#You can rename columns at the same time you select them
la22 %>% select(SiteName, percent_limited_english=X.LEP)
#You can rename columns at the same time you select them
la22 %>% select(SiteName, percent_limited_english=X.LEP)
#Take our student dataframe from before and add an age_in_dog_years column
df %>% mutate(age_in_dog_years = age*7)
#Add a column for first name in upper case letters
df %>% mutate(first_name_but_yelling = toupper(first))
#Mutate can also modify existing columns instead of adding new ones.
df %>% mutate(first = toupper(first))
#Can modify multiple columns at once
df %>% mutate(first = toupper(first),
last = toupper(last))
#For la22 dataframe, add an Early Childhood Total column for PreK, K and 1st grade
la22 %>% mutate(early_childhood_total = PreK + Kindergarten + Grade1) %>%
select(SiteName, PreK:Grade1, early_childhood_total)
#Add a column for total enrollment in grades K-8
la22 %>% mutate(total_k8 = rowSums(across(Kindergarten:Grade12))) %>%
select(SiteName, total_k8)
#For la22 dataframe, add an Early Childhood Total column for PreK, K and 1st grade
la22 %>% mutate(early_childhood_total = PreK + Kindergarten + Grade1) %>%
select(SiteName, PreK:Grade1, early_childhood_total)
#For la22 dataframe, add an Early Childhood Total column for PreK, K and 1st grade
la22 %>% mutate(early_childhood_total = PreK + Kindergarten + Grade1) %>%
select(SiteName, PreK:Grade1, early_childhood_total)
#Add a column for total enrollment in grades K-8
la22 %>% mutate(total_k8 = rowSums(across(Kindergarten:Grade12))) %>%
select(SiteName, total_k8)
la22 %>% mutate_at(Kindergarten:Grade12, total_k8 = rowSums(.))
#Add a column for total enrollment in grades K-8
la22 %>% mutate(total_k8 = rowSums(across(Kindergarten:Grade12))) %>%
select(SiteName, total_k8)
#Add a column for percent minority
la22 %>% mutate(pct_minority = Minority/Total.Students * 100)
#Add a column for percent minority
la22 %>% mutate(pct_minority = Minority/Total.Students * 100) %>%
select(SiteName, pct_minority)
#Ifelse() is similar to the =IF formula in Excel
la22 %>% mutate(predominant_gender = ifelse(test = X.Female >= 0.5,
yes = "Female",
no = "Male"))
#Ifelse() is similar to the =IF formula in Excel
la22 %>% mutate(predominant_gender = ifelse(test = X.Female >= 0.5,
yes = "Female",
no = "Male")) %>%
View()
#Ifelse() is similar to the =IF formula in Excel
la22 %>% mutate(predominant_gender = ifelse(test = X.Female >= 0.5,
yes = "Female",
no = "Male")) %>%
select(SiteName, X.Female, predominant_gender)
la22 %>% mutate(predominant_gender = case_when(
X.Female > 0.5 ~ "Female",
X.Female == 0.5 ~ "Equally Male and Female",
TRUE ~ "Male"
))
la22 %>% mutate(predominant_gender = case_when(
X.Female > 0.5 ~ "Female",
X.Female == 0.5 ~ "Equally Male and Female",
TRUE ~ "Male"
))
la22 %>% mutate(predominant_gender = case_when(
X.Female > 0.5 ~ "Female",
X.Female == 0.5 ~ "Equally Male and Female",
TRUE ~ "Male"
)) %>%  select(SiteName, X.Female, X.Male, predominant_gender)
#Classify schools as large, small or medium
la22 %>% mutate(school_size = case_when(
Total.Students < 500 ~ "Small",
Total.Students >= 500 & Total.Students < 1000 ~ "Medium",
TRUE ~ "Large"
)) %>%
arrange(Total.Students) %>%
View()
la22 %>% mutate(school_type = case_when(
str_detect(SiteName, "High School") ~ "High School",
str_detect(SiteName, "Elementary School") ~ "Elementary School",
str_detect(SiteName, "Middle School") ~ "Middle School",
TRUE ~ "Not sure"
)) %>% select(SiteName, school_type)
#Use ntile() to classify schools into quartiles based on the percent of students who are economically disadvantaged. Schools in quartile 1 will be the least economically disadvantaged and schools in quartile 4 will be the most economically disadvantaged.
#Use the ntile() function to group schools into quartiles (n=4), quintile (n=5), deciles (n=10), etc.
la22 %>% select(SiteName, Parish.Code, pct_disadvantaged = ED.) %>%
mutate(quartile = ntile(pct_disadvantaged, n=4)) %>%
arrange(pct_disadvantaged) %>%
View()
la22 %>% select(SiteName, Parish.Code, pct_disadvantaged = ED.) %>%
mutate(quartile = ntile(pct_disadvantaged, n=4)) %>%
arrange(pct_disadvantaged) %>%
View()
la22 %>% select(SiteName, Parish.Code, Total.Students) %>%
mutate(quartile = ntile(pct_disadvantaged, n=4)) %>%
arrange(pct_disadvantaged) %>%
View()
la22 %>% select(SiteName, Parish.Code, Total.Students) %>%
mutate(quartile = ntile(Total.Students, n=4)) %>%
arrange(pct_disadvantaged) %>%
View()
la22 %>% select(SiteName, Parish.Code, Total.Students) %>%
mutate(quartile = ntile(Total.Students, n=4)) %>%
arrange(Total.Students) %>%
View()
#Get a random sample of four schools
la22 %>% slice_sample(n=4)
#Get a random sample of four schools
la22 %>% slice_sample(n=4)
#Get a random sample of one school from each parish
la22 %>% group_by(Parish.Code) %>% slice_sample(n=1)
#Get a random sample of four schools
la22 %>% slice_sample(n=4)
#Get a random sample of four schools
la22 %>% slice_sample(n=4)
#Get a random sample of four schools
la22 %>% slice_sample(n=4)
#Get a random sample of one school from each parish
la22 %>% group_by(Parish.Code) %>% slice_sample(n=1)
#Assign schools to quartiles based on the percent of students who are disadvantaged, relative to the state as a whole
la22 %>% select(SiteName, School.System.Name, Parish.Code, ED.) %>%
mutate(quartile = ntile(ED., n=4)) %>%
arrange(pct_disadvantaged) %>%
View()
#Assign schools to quartiles based on the percent of students who are disadvantaged, relative to the state as a whole
la22 %>% select(SiteName, School.System.Name, Parish.Code, ED.) %>%
mutate(quartile = ntile(ED., n=4)) %>%
arrange(ED.) %>%
View()
#Previously, we assigned districts to quartiles based on how they ranked within the state as a whole.
#Assign schools to quartiles based on the percent of students who are disadvantaged, relative to the state as a whole
la22 %>% select(SiteName, School.System.Name, Parish.Code, ED.) %>%
mutate(quartile = ntile(ED., n=4)) %>%
arrange(ED.) %>%
View()
#We can use group_by to instead assign districts to quartiles based on how they rank within their parish.
#Now assign schools to quartiles relative to the PARISH they're in
la22 %>% select(SiteName, School.System.Name, Parish.Code, ED.) %>%
group_by(Parish.Code) %>%
mutate(quartile = ntile(ED., n=4)) %>%
arrange(pct_disadvantaged) %>%
View()
#We can use group_by to instead assign districts to quartiles based on how they rank within their parish.
#Now assign schools to quartiles relative to the PARISH they're in
la22 %>% select(SiteName, School.System.Name, Parish.Code, ED.) %>%
group_by(Parish.Code) %>%
mutate(quartile = ntile(ED., n=4)) %>%
arrange(ED.) %>%
View()
la22 %>% summarize(median_pct_disadvantaged = median(ED.),
average_pct_disadvantaged = mean(ED.),
number_of_schools = n())
#Assign schools to quartiles based on the percent of students who are disadvantaged, relative to the state as a whole
la22 %>% select(SiteName, School.System.Name, Parish.Code, ED.) %>%
mutate(quartile = ntile(ED., n=4)) %>%
arrange(ED.) %>%
View()
#Previously, we assigned districts to quartiles based on how they ranked within the state as a whole.
#We can use group_by to instead assign districts to quartiles based on how they rank within their parish.
#Now assign schools to quartiles relative to the PARISH they're in
la22 %>% select(SiteName, School.System.Name, Parish.Code, ED.) %>%
group_by(Parish.Code) %>%
mutate(quartile = ntile(ED., n=4)) %>%
arrange(ED.) %>%
View()
la22 %>% summarize(median_pct_disadvantaged = median(ED.),
average_pct_disadvantaged = mean(ED.),
number_of_schools = n())
la22 %>% summarize(median_pct_disadvantaged = median(ED.),
average_pct_disadvantaged = mean(ED.),
number_of_schools = n())
la22 %>% group_by(School.System.Name) %>%
summarize(median_pct_disadvantaged = median(ED.),
average_pct_disadvantaged = mean(ED.),
number_of_schools = n())
la22 %>% group_by(School.System.Name) %>%
summarize(median_pct_disadvantaged = median(ED.),
average_pct_disadvantaged = mean(ED.),
number_of_schools = n())
#Find the enrollment in the smallest and largest schools in each school system
la22 %>% group_by(School.System.Name) %>%
summarize(min_students = min(Total.Students),
max_students = max(Total.Students))
la22 %>% group_by(School.System.Name) %>%
summarize(amind = sum(AmInd),
black = sum(Black))
la22 %>% select(SiteName, Parish.Code, Kindergarten, Nonprofit, pct_disadvantaged = ED.)
filter(Parish.Code == 36)
la22 %>% select(SiteName, Parish.Code, Kindergarten, Nonprofit, pct_disadvantaged = ED.) %>%
filter(Parish.Code == 36) %>%
mutate(pct_disadvantaged = pct_disadvantaged * 100) %>%
group_by(Nonprofit) %>%
summarize(total_kinder = sum(Kindergarten),
median_ed = median(pct_disadvantaged)) %>%
arrange(-total_kinder) %>%
View()
la22 %>% select(SiteName, Parish.Code, Kindergarten, Nonprofit, pct_disadvantaged = ED.) %>%
# filter(Parish.Code == 36) %>%
# mutate(pct_disadvantaged = pct_disadvantaged * 100) %>%
# group_by(Nonprofit) %>%
# summarize(total_kinder = sum(Kindergarten),
#            median_ed = median(pct_disadvantaged)) %>%
# arrange(-total_kinder) %>%
View()
la22 %>% select(SiteName, Parish.Code, Kindergarten, Nonprofit, pct_disadvantaged = ED.) %>%
filter(Parish.Code == 36) %>%
# mutate(pct_disadvantaged = pct_disadvantaged * 100) %>%
# group_by(Nonprofit) %>%
# summarize(total_kinder = sum(Kindergarten),
#            median_ed = median(pct_disadvantaged)) %>%
# arrange(-total_kinder) %>%
View()
la22 %>% select(SiteName, Parish.Code, Kindergarten, Nonprofit, ED.) %>%
filter(Parish.Code == 36) %>%
mutate(pct_disadvantaged = ED. * 100) %>%
# group_by(Nonprofit) %>%
# summarize(total_kinder = sum(Kindergarten),
#            median_ed = median(pct_disadvantaged)) %>%
# arrange(-total_kinder) %>%
View()
la22 %>% select(SiteName, Parish.Code, Kindergarten, Nonprofit, ED.) %>%
filter(Parish.Code == 36) %>%
mutate(pct_disadvantaged = ED. * 100) %>%
group_by(Nonprofit) %>%
# summarize(total_kinder = sum(Kindergarten),
#            median_ed = median(pct_disadvantaged)) %>%
# arrange(-total_kinder) %>%
View()
la22 %>% select(SiteName, Parish.Code, Kindergarten, Nonprofit, ED.) %>%
filter(Parish.Code == 36) %>%
mutate(pct_disadvantaged = ED. * 100) %>%
group_by(Nonprofit) %>%
summarize(total_kinder = sum(Kindergarten),
median_ed = median(pct_disadvantaged)) %>%
# arrange(-total_kinder) %>%
View()
la22 %>% select(SiteName, Parish.Code, Kindergarten, Nonprofit, ED.) %>%
filter(Parish.Code == 36) %>%
mutate(pct_disadvantaged = ED. * 100) %>%
group_by(Nonprofit) %>%
summarize(total_kinder = sum(Kindergarten),
median_ed = median(pct_disadvantaged)) %>%
arrange(-total_kinder) %>%
View()
grades = read_excel("./data/2022-school-performance-scores.xlsx", skip=3) %>%
slice(1:1174)
View(grades)
#Select first six columns for simplicity and clean up the column names
grades = grades %>% select(1:6)
colnames(grades) = c("site_code", "school", "school_system", "school_type", "grade", "sps")
glimpse(grades)
merged = left_join(la22, grades, by=c("SiteCd"="site_code"))
View(merged)
#A right_join will do the reverse
merged = right_join(la22, grades, by=c("SiteCd"="site_code"))
merged = left_join(la22, grades, by=c("SiteCd"="site_code"))
#A right_join will do the reverse
merged = right_join(la22, grades, by=c("SiteCd"="site_code"))
#A full_join will keep all rows on both sides
merged = full_join(la22, grades, by=c("SiteCd"="site_code"))
#An inner_join will only keep the rows that both sides have in common
merged = inner_join(la22, grades, by=c("SiteCd"="site_code"))
#A full_join will keep all rows on both sides
merged = full_join(la22, grades, by=c("SiteCd"="site_code"))
#An anti_join will only keep the rows that both sides DON'T have in common
merged = anti_join(la22, grades, by=c("SiteCd"="site_code"))
View(merged)
merged = anti_join(grades, la22, by=c("site_code"="SiteCd"))
#A full_join will keep all rows on both sides
merged = full_join(la22, grades, by=c("SiteCd"="site_code"))
#An inner_join will only keep the rows that both sides have in common
merged = inner_join(la22, grades, by=c("SiteCd"="site_code"))
#A full_join will keep all rows on both sides
merged = full_join(la22, grades, by=c("SiteCd"="site_code"))
#An anti_join will only keep the rows that both sides DON'T have in common
anti_join(la22, grades, by=c("SiteCd"="site_code"))
anti_join(grades, la22, by=c("site_code"="SiteCd"))
#A full_join will keep all rows on both sides
merged = full_join(la22, grades, by=c("SiteCd"="site_code"))
#An anti_join will only keep the rows that both sides DON'T have in common
anti_join(grades, la22, by=c("site_code"="SiteCd"))
View(merged)
anti_join(la22, grades, by=c("SiteCd"="site_code"))
anti_join(la22, grades, by=c("SiteCd"="site_code"))
idea_3_to_5 = read_excel("./data/2021-bchildcountandedenvironment-2.xlsx", skip=8) %>%
slice(1:61)
idea_3_to_5 = read_excel("./data/2021-bchildcountandedenvironment-2.xlsx", skip=8) %>%
slice(1:61)
idea_6_to_21 = read_excel("./data/2021-bchildcountandedenvironment-3.xlsx", skip=8) %>%
slice(1:61)
View(idea_3_to_5)
View(idea_6_to_21)
idea_3_to_5 = read_excel("./data/2021-bchildcountandedenvironment-2.xlsx", skip=8) %>%
slice(1:61)
idea_6_to_21 = read_excel("./data/2021-bchildcountandedenvironment-3.xlsx", skip=8) %>%
slice(1:61)
idea_3_to_5$age_range = "3-5"
idea_6_to_21$age_range = "6-21"
idea = rbind(idea_3_to_5, idea_6_to_21)
View(idea)
fips = read_csv("./data/state_fips.csv")
library(tidyverse)
library(readxl)
library(ggplot2)
la22 = read_excel("./data/louisiana_enrollment/oct-2022-multi-stats-(total-by-site-and-school-system).xlsx", sheet=2, skip=5)
colnames(la22) = make.names(colnames(la22))
enrollment_by_race = la22 %>% group_by(School.System.Name) %>%
summarize(amind = sum(AmInd),
asian = sum(Asian),
black = sum(Black),
white = sum(White),
hispanic = sum(Hispanic),
hawaiian = sum(HawPI),
multiple = sum(Multiple),
minority = sum(Minority))
race_wide = la22 %>% select(School.System.Name, SiteName, AmInd:Minority)
race_long = la22 %>% select(School.System.Name, SiteName, AmInd:Minority) %>%
pivot_longer(cols = AmInd:Minority,
names_to="race",
values_to="enrollment")
View(race_wide)
View(race_long)
