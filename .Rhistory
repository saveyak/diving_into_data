str_replace("_Capital_Outlay_F12_District_Finance","")
df = df %>% rename(State=State_Name_District_Latest_available_year,
NCES=Agency_ID_NCES_Assigned_District_Latest_available_year)
df = rename(df, Agency=Agency_Name)
#We could do this
df %>% slice(1:20467)
#Instead, use drop_na() to drop all rows that are NA within the column "NCES."
df = df %>% drop_na(NCES)
unique(df$Agency_Type_District_2018_19)
df %>% count(Agency_Type_District_2018_19)
#The data also tells us if all the schools in a district are charter, noncharter or both.
unique(df$Agency_Charter_Status_District_2017_18)
#One option: Replace all cells that are just "†" to NA
df[df == "†"] <- NA
df = df %>% mutate_at(8:ncol(df), as.numeric)
df = df %>% filter(if_all(starts_with("Total_Students"), ~ .x >= 100))
df %>% count(Agency_Type_District_2018_19)
#Let's check if any districts are duplicated; we would want to filter them out if they were.
subset(df,duplicated(NCES))
poverty = read_excel('./data/ussd20.xls', skip=2)
View(poverty)
#This dataset also needs to be cleaned up a bit.
#Create new column names
colnames(poverty) = c("state","state_fips","district_ID", "name", "total_pop", "pop_5to17", "pop_5to17_in_poverty")
poverty = poverty %>% mutate(NCES=paste0(state_fips, district_ID))
colnames(poverty)
#Create a column called pct_children_in_poverty
poverty$pct_children_in_poverty = poverty$pop_5to17_in_poverty / poverty$pop_5to17 * 100
df = left_join(df, poverty, by="NCES")
df %>% filter(is.na(pct_children_in_poverty)) %>% count(Agency_Type_District_2018_19)
#Filter to include only the districts where pct_children_in_poverty is NOT N/A
df = df %>% filter(!is.na(pct_children_in_poverty))
df %>% count(Agency_Type_District_2018_19)
df$five_year_totals_ops = df %>% select(starts_with("Total_Ops")) %>% rowSums(.)
df$five_year_totals_construction = df %>% select(starts_with("Construction")) %>% rowSums(.)
df$five_year_totals_students = df %>% select(starts_with("Total_Students")) %>% rowSums(.)
#Let's go with within-state poverty quintile for each state (supported by the literature: https://www.barbarabiasi.com/uploads/1/0/1/2/101280322/pp_schoolconstruction.pdf)
#Remember, quintile 1 is richest and quintile 5 is poorest
df = df %>% group_by(state) %>%
mutate(state_poverty_quintile=ntile(pct_children_in_poverty, 5)) %>%
ungroup()
df %>% filter(State == "Mississippi" | State == "Connecticut") %>%
group_by(State, state_poverty_quintile) %>%
summarize(lower_bound = min(pct_children_in_poverty),
upper_bound=max(pct_children_in_poverty))
#What do school districts spend on maintenance and operation every year, by poverty level?
df %>% group_by(state_poverty_quintile) %>%
summarize(mo=sum(five_year_totals_ops),
students=sum(five_year_totals_students)) %>%
mutate(mo_per_student = mo/students)
#What do school districts spend on maintenance and operation every year, by poverty level?
df %>% group_by(state_poverty_quintile) %>%
summarize(mo=sum(five_year_totals_ops, na.rm=T),
students=sum(five_year_totals_students, na.rm=T)) #%>%
#What do school districts spend on maintenance and operation every year, by poverty level?
df %>% group_by(state_poverty_quintile) %>%
summarize(mo=sum(five_year_totals_ops, na.rm=T),
students=sum(five_year_totals_students, na.rm=T)) %>%
mutate(mo_per_student = mo/students)
colnames(dfd)
colnames(df)
df %>% group_by(state_poverty_quintile) %>%
summarize(co=sum(five_year_totals_construction, na.rm=T),
students=sum(five_year_totals_students, na.rm=T)) %>%
mutate(co_per_student = co/students)
fruit
#Say we want to print out the name of each fruit, one at a time...
print("apple")
print("apricot")
print("avocado")
for (f in fruit) {
print(f)
}
for (f in fruit) {
f = toupper(f)
print(paste0("I like to eat ", f,"S!"))
}
for (f in fruit) {
f = toupper(f)
print(paste0("I like to eat", f,"S!"))
}
print(paste("I like to eat", f,"S!"))
for (f in fruit) {
f = toupper(f)
print(paste0("I like to eat ", f,"S!"))
}
#You can also specify a range of numbers
for (i in 1:5) {
print(i)
}
print(i*10)
#You can also specify a range of numbers
for (i in 1:5) {
print(i*10)
}
for (f in fruit[1:5]) {
f = toupper(f)
print(paste0("I like to eat ", f,"S!"))
}
for (i in 1:length(fruit)) {
print(i)
}
for (i in 1:5) {
print(paste0("I ate", i*10, "fruits"))
}
for (i in 1:5) {
print(paste0("I ate ", i*10, " fruits"))
}
print(paste("I ate", i*10, "fruits"))
for (i in 1:5) {
print(paste("I ate", i*10, "fruits"))
}
files = list.files("./data/louisiana_enrollment/")
files
print(f)
#Go through each file in the list of files and print its name.
for (f in files) {
print(f)
}
#Go through each file in the list of files and print its name.
for (f in files) {
print(f)
}
#Go through each file in the list of files and print its name, then create a dataframe.
for (f in files) {
filepath = paste0("./data/louisiana_enrollment/", f)
print(filepath)
#  df = read_excel(filepath, skip=5)
}
#Go through each file in the list of files and print its name, then create a dataframe.
for (f in files) {
filepath = paste0("./data/louisiana_enrollment/", f)
print(filepath)
df = read_excel(filepath, skip=5)
}
View(df)
la_grades = data.frame()
View(la_grades)
View(la_grades)
for (f in files) {
filepath = paste0("./data/louisiana_enrollment/", f)
print(filepath)
df = read_excel(filepath, skip=5)
la_grades = rbind(la_grades, df)
}
la_grades = data.frame()
for (f in files) {
filepath = paste0("./data/louisiana_enrollment/", f)
print(filepath)
df = read_excel(filepath, skip=5) %>%
filter(`School System Name`=="Statewide total") %>%
select(PreK:Grade12) %>%
pivot_longer(PreK:Grade12, names_to="grade", values_to="enrollment") %>%
filter(grade != "GradeT9")
df$census_date = str_extract(filepath,"oct-20..") #extracts "oct-20" and then the two following characters
la_grades = rbind(la_grades, df)
}
View(la_grades)
View(la_grades)
la_grades = data.frame()
for (f in files) {
filepath = paste0("./data/louisiana_enrollment/", f)
print(filepath)
df = read_excel(filepath, skip=5) %>%
filter(`School System Name`=="Statewide total" | `School System Name`=="Totals") %>%
select(PreK:Grade12) %>%
pivot_longer(PreK:Grade12, names_to="grade", values_to="enrollment") %>%
filter(grade != "GradeT9")
df$census_date = str_extract(filepath,"oct-20..")
la_grades = rbind(la_grades, df)
}
View(la_grades)
la_grades = la_grades %>%
arrange(grade) %>%
mutate(previous_year_value = case_when(
census_date == "oct-2017" ~ NA_real_,
TRUE  ~ lag(enrollment, order_by=grade),
))
la_grades = la_grades %>%
arrange(grade) %>%
mutate(previous_year_value = case_when(
census_date == "oct-2017" ~ NA,
TRUE  ~ lag(enrollment, order_by=grade),
))
??lag
#Mutate to calculate year-over-year changes
la_grades = la_grades %>%
mutate(yoy_change = (enrollment-previous_year_value)/previous_year_value*100)
#Round year-over-year change to two decimal places
la_grades = la_grades %>% mutate(yoy_change = round(yoy_change, 2))
View(la_grades)
#Let's start with a simple bar graph for one year.
la22 = la_grades %>% filter(census_date=="oct-2022")
ggplot(data=la22, aes(x=grade, y=enrollment)) +
geom_bar(position="dodge", stat="identity")
glimpse(la_grades)
grade_order = c("PreK", "Kindergarten", "Grade1", "Grade2", "Grade3", "Grade4", "Grade5", "Grade6", "Grade7", "Grade8", "Grade9", "Grade10", "Grade11", "Grade12")
la22$grade = factor(la22$grade, levels=grade_order)
glimpse(la22)
#Now we can make a bar char in the right order
ggplot(la22, aes(x=grade, y=enrollment)) +
geom_bar(stat="identity")
#Bar plot, enrollment in each grade over time. We specify fill=census_date so there will be a bar of a different color for each date.
ggplot(la_grades,aes(x=grade, y=enrollment, fill=census_date)) +
geom_bar(stat="identity")
#It's stacking each year on top of each other instead of stacking them next to each other. Specify position="dodge" to avoid this problem.
ggplot(la_grades,aes(x=grade, y=enrollment, fill=census_date)) +
geom_bar(position="dodge", stat="identity")
glimpse(la_grades)
#Let's refactor the entire la_grades dataframe as well.
la_grades$grade = factor(la_grades$grade, levels=grade_order)
glimpse(la_grades)
#Let's change the colors
ggplot(la_grades,aes(x=grade, y=enrollment, fill=census_date)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Purples")
ggplot(la_grades,aes(fill=grade, y=enrollment, x=grade)) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(~ census_date)
#To flip the X and Y axis so we have horizontal bars, use coord_flip()
ggplot(la_grades,aes(fill=grade, y=enrollment, x=grade)) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(~ census_date) +
coord_flip()
#Let's say we wanted line charts instead of bar graphs. Sometimes having just a simple line cuts out distracting visual information.
#Make a line chart for just 2022:
ggplot(la22, aes(x=grade, y=enrollment, group=1)) +
geom_line()
#Same line plot, but with a dot for each grade
ggplot(la22, aes(x=grade, y=enrollment, group=1)) +
geom_line() +
geom_point()
ggplot(la_grades, aes(x=grade, y=enrollment, group=census_date)) +
geom_line()
#Let's have all the lines be different colors
ggplot(la_grades, aes(x=grade, y=enrollment, group=census_date, color=census_date)) +
geom_line()
ggplot(la_grades,aes(group=census_date, y=enrollment, x=grade)) +
geom_line() +
facet_wrap(~ census_date)
#Look at the trend for each grade
ggplot(la_grades,aes(group=grade, y=enrollment, x=census_date)) +
geom_line() +
facet_wrap(~ grade)
#Graph percent change, with small multiples of years
la_grades %>% filter(census_date !="oct-2017") %>%
ggplot(aes(fill=grade, y=yoy_change, x=grade)) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(~ census_date)
#Graph percent change, with small multiples of grades
la_grades %>% filter(census_date !="oct-2017") %>%
ggplot(aes(fill=census_date, y=yoy_change, x=census_date)) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(~ grade) +
coord_flip()
library(tidyverse)
library(readr)
library(readxl)
leaid = '1302280'
lea_18 = read_csv('./data/crdc_201718_Public_Use_Files/Data/LEA/CRDC/CSV/LEA Characteristics.csv') %>%
filter(LEAID == leaid)
enr_18 = read_csv('./data/crdc_201718_Public_Use_Files/Data/SCH/CRDC/CSV/Enrollment.csv') %>% filter(LEAID==leaid)
#Make all negative numbers into NA
enr_18[enr_18<0] = NA
enr_18$total_enr = enr_18 %>% select(contains('SCH_ENR')) %>%
select(!contains(c("IDEA","504","LEP"))) %>% #Don't want to double count special education/English language learner students
rowSums(.)
#All the columns that show enrollment start with SCH_ENR
enr_18 %>% select(contains('SCH_ENR')) %>% View()
#We could tediously type out a new column for each race
enr_18 %>% mutate(hispanics = SCH_ENR_HI_M + SCH_ENR_HI_F,
asians = SCH_ENR_AS_M + SCH_ENR_AS_F) #and so on
races = c("HI", "AM", "AS", "HP", "WH", "TR", "BL")
for (race in races) {
male = paste0("SCH_ENR_",race,"_M")
female = paste0("SCH_ENR_",race,"_F")
col_name = paste0(race,"_enr")
enr_18[col_name] = enr_18[male] + enr_18[female]
}
enr_by_race = function(df) {
races = c("HI", "AM", "AS", "HP", "WH", "TR", "BL")
df$total_enr = df %>% select(contains('SCH_ENR')) %>%
select(!contains(c("IDEA","504","LEP"))) %>%
rowSums(.)
for (race in races) {
male = paste0("SCH_ENR_",race,"_M")
female = paste0("SCH_ENR_",race,"_F")
col_name = paste0(race,"_enr")
df[col_name] = df[male] + df[female]
}
return(df)
}
enr_18 = enr_by_race(enr_18)
total_enr_18 = sum(enr_18$total_enr) #95,225 in 2018
lea_18$LEA_ENR #95,238 listed in the LEA file, so basically matches what we calculated
percent_by_race = function(df) {
races = c("HI", "AM", "AS", "HP", "WH", "TR", "BL")
df$total_enr = df %>% select(contains('SCH_ENR')) %>%
select(!contains(c("IDEA","504","LEP"))) %>%
rowSums(.)
for (race in races) {
male = paste0("SCH_ENR_",race,"_M")
female = paste0("SCH_ENR_",race,"_F")
col_name = paste0(race,"_pct_enrollment")
df[col_name] = (df[male] + df[female])/df['total_enr']*100
df[col_name] = round(df[col_name], 2)
}
return(df)
}
enr_18 = percent_by_race(enr_18)
offenses_18 = read_csv('./data/crdc_201718_Public_Use_Files/Data/SCH/CRDC/CSV/Offenses.csv') %>%
filter(LEAID==leaid)
#How many fights without weapons occurred?
offenses_18 %>%
summarize(total_attacks_without_weapon=sum(SCH_OFFENSE_ATTWOW))
offenses_18 = read_csv('./data/crdc_201718_Public_Use_Files/Data/SCH/CRDC/CSV/Offenses.csv') %>%
filter(LEAID==leaid)
#How many fights without weapons occurred?
offenses_18 %>%
summarize(total_attacks_without_weapon=sum(SCH_OFFENSE_ATTWOW))
#How many schools witnessed at least one school shooting?
offenses_18 %>% count(SCH_FIREARM_IND)
staff_18 = read_csv('./data/crdc_201718_Public_Use_Files/Data/SCH/CRDC/CSV/School Support.csv') %>%
filter(LEAID == leaid) %>%
select(COMBOKEY, SCH_NAME, SCH_FTETEACH_TOT, SCH_FTECOUNSELORS, SCH_FTESECURITY_LEO)
#Total teachers (full-time equivalent)
sum(staff_18$SCH_FTETEACH_TOT)
rs_18 = read_csv('./data/crdc_201718_Public_Use_Files/Data/SCH/CRDC/CSV/Restraint and Seclusion.csv') %>%
filter(LEAID == leaid) %>% select(SCH_NAME, COMBOKEY, contains('RSINSTANCES'))
rs_18 = read_csv('./data/crdc_201718_Public_Use_Files/Data/SCH/CRDC/CSV/Restraint and Seclusion.csv') %>%
filter(LEAID == leaid) %>% select(SCH_NAME, COMBOKEY, contains('RSINSTANCES'))
#Much of this data is suppressed. So we need to replace the negative codes with NA.
rs_18[rs_18<0] = NA
rs_18$total_phys = rs_18$SCH_RSINSTANCES_PHYS_IDEA +
rs_18$SCH_RSINSTANCES_PHYS_WODIS +
rs_18$SCH_RSINSTANCES_PHYS_504
sum(rs_18$total_phys)
sum(rs_18$total_phys, na.rm=TRUE)
sus_18 = read_csv('./data/crdc_201718_Public_Use_Files/Data/SCH/CRDC/CSV/Suspensions.csv') %>%
filter(LEAID == leaid) %>%
select(SCH_NAME, COMBOKEY, contains('_OOSINSTANCES'))
sus_18 = sus_18 %>% mutate(total_oos_incidents = SCH_OOSINSTANCES_WODIS + SCH_OOSINSTANCES_IDEA + SCH_OOSINSTANCES_504)
sum(sus_18$total_oos_incidents) #7,554 out-of-school suspensions in 2018
oos_18 = read_csv('./data/crdc_201718_Public_Use_Files/Data/SCH/CRDC/CSV/Suspensions.csv') %>%
filter(LEAID == leaid) %>% select(SCH_NAME, COMBOKEY, contains('OOS_'))
#Make everything that's a negative reserve code NA
oos_18[oos_18<0] = NA
#Join enrollment data to suspension data
enr_18_race = enr_18 %>% select(SCH_NAME, COMBOKEY, total_enr, ends_with('_enr'))
oos_18 = left_join(oos_18, enr_18_race, by='COMBOKEY')
oos_by_race = function(df) {
races = c("_HI", "_AM", "_AS", "_HP", "_WH", "_TR", "_BL")
for (race in races) {
col_name = paste0("oos", race)
df[col_name] = df %>% select(contains('OOS_')) %>%
select(contains(race)) %>% mutate_if(is.character, as.numeric) %>% rowSums(., na.rm=T)
}
return(df)
}
oos_18 = oos_by_race(oos_18)
oos_18 %>% select(SCH_NAME.x, starts_with("oos_")) %>% View()
risk_ratio = function(race, df) {
#Write variables for the columns that you want to reference
oos = paste0("oos_",race) #E.g., "oos_BL" for Black students
enr = paste0(race,"_enr") #E.g., "BL_enr" for Black students
race_risk = sum(df[oos], na.rm=T)/sum(df[enr], na.rm=T)
#This is the sum of out-of-school suspensions for that race, divided by the total number of students of that race
wh_risk = sum(df$oos_WH, na.rm=T)/sum(df$WH_enr, na.rm=T)
#The sum of out-of-school suspensions for white students, divided by the total number of white students
risk_ratio = race_risk/wh_risk
#Divide the risk of suspension for students of a particular race by the risk for white students
return(risk_ratio)
#You must always end functions by returning an output. If you don't specify what you want the function to give you at the end, you'll get nothing.
}
risk_ratio('BL', oos_18) #Black students were 6.3 times as likely as White students be suspended.
risk_ratio = function(race, df) {
#Write variables for the columns that you want to reference
oos = paste0("oos_",race) #E.g., "oos_BL" for Black students
enr = paste0(race,"_enr") #E.g., "BL_enr" for Black students
race_risk = sum(df[oos], na.rm=T)/sum(df[enr], na.rm=T)
#This is the sum of out-of-school suspensions for that race, divided by the total number of students of that race
wh_risk = sum(df$oos_WH, na.rm=T)/sum(df$WH_enr, na.rm=T)
#The sum of out-of-school suspensions for white students, divided by the total number of white students
risk_ratio = race_risk/wh_risk
#Divide the risk of suspension for students of a particular race by the risk for white students
print(paste0("total students of that race suspended:", sum(df[oos], na.rm=T) ))
print(paste0("total students of that race:", sum(df[enr], na.rm=T)))
print(paste0("total White students suspended:",  sum(df$oos_WH, na.rm=T) ))
print(paste0("total White students:",sum(df$WH_enr, na.rm=T)))
return(risk_ratio)
#You must always end functions by returning an output. If you don't specify what you want the function to give you at the end, you'll get nothing.
}
risk_ratio('BL', oos_18) #Black students were 6.3 times as likely as White students be suspended.
risk_ratio = function(race, df) {
#Write variables for the columns that you want to reference
oos = paste0("oos_",race) #E.g., "oos_BL" for Black students
enr = paste0(race,"_enr") #E.g., "BL_enr" for Black students
race_risk = sum(df[oos], na.rm=T)/sum(df[enr], na.rm=T)
#This is the sum of out-of-school suspensions for that race, divided by the total number of students of that race
wh_risk = sum(df$oos_WH, na.rm=T)/sum(df$WH_enr, na.rm=T)
#The sum of out-of-school suspensions for white students, divided by the total number of white students
risk_ratio = race_risk/wh_risk
#Divide the risk of suspension for students of a particular race by the risk for white students
print(paste("total students of that race suspended:", sum(df[oos], na.rm=T) ))
print(paste("total students of that race:", sum(df[enr], na.rm=T)))
print(paste("total White students suspended:",  sum(df$oos_WH, na.rm=T) ))
print(paste("total White students:",sum(df$WH_enr, na.rm=T)))
return(risk_ratio)
#You must always end functions by returning an output. If you don't specify what you want the function to give you at the end, you'll get nothing.
}
risk_ratio('BL', oos_18) #Black students were 6.3 times as likely as White students be suspended.
risk_ratio = function(race, df) {
#Write variables for the columns that you want to reference
oos = paste0("oos_",race) #E.g., "oos_BL" for Black students
enr = paste0(race,"_enr") #E.g., "BL_enr" for Black students
race_risk = sum(df[oos], na.rm=T)/sum(df[enr], na.rm=T)
#This is the sum of out-of-school suspensions for that race, divided by the total number of students of that race
wh_risk = sum(df$oos_WH, na.rm=T)/sum(df$WH_enr, na.rm=T)
#The sum of out-of-school suspensions for white students, divided by the total number of white students
risk_ratio = race_risk/wh_risk
#Divide the risk of suspension for students of a particular race by the risk for white students
print(race)
print(paste("total students of that race suspended:", sum(df[oos], na.rm=T) ))
print(paste("total students of that race:", sum(df[enr], na.rm=T)))
print(paste("total White students suspended:",  sum(df$oos_WH, na.rm=T) ))
print(paste("total White students:",sum(df$WH_enr, na.rm=T)))
return(risk_ratio)
#You must always end functions by returning an output. If you don't specify what you want the function to give you at the end, you'll get nothing.
}
risk_ratio('BL', oos_18) #Black students were 6.3 times as likely as White students be suspended.
risk.ratio(4688, 39933, 503, 27137)
install.packages("epitools")
#install.packages("epitools")
library(epitools)
risk.ratio(4688, 39933, 503, 27137)
riskratio(4688, 39933, 503, 27137)
#install.packages("epitools")
library(epitools)
rrtable = matrix(c(4688, 39933, 503, 27137), nrow = 2, ncol = 2)
riskratio.wald(RRtable)
riskratio.wald(rrtable)
la22 = read_excel("./data/louisiana_enrollment/oct-2022-multi-stats-(total-by-site-and-school-system).xlsx", sheet=2, skip=5)
colnames(la22) = make.names(colnames(la22))
View(la22)
la22 %>% group_by(School.System.Name) %>% summarize(mean(Total.Students))
la22 %>% group_by(School.System.Name) %>% summarize(mean(X.Female))
la22 %>% mutate(girls = X.Female * Total.Students) %>%
group_by(School.System.Name) %>% summarize(mean(girls))
la22 %>% mutate(girls = X.Female * Total.Students) %>%
group_by(School.System.Name) %>% summarize(mean(girls)) %>%
arrange(-mean(girls))
la22 %>% mutate(girls = X.Female * Total.Students) %>%
group_by(School.System.Name) %>% summarize(mean(girls)) %>%
arrange(-`mean(girls)`)
library(tidyverse)
library(rvest)
webpage = read_html(url) #Read the HTML, the code that makes up the webpage
View(webpage)
tables <- html_nodes(webpage, "table") %>% #Search for all "table" elements in the HTML
html_table() #Turn those tables into dataframes
length(tables)
tables[1]
tables[2]
tables[3]
tables[[2]]
budget = tables[2] #The scraper found three tables; we only need the 2nd
View(budget)
budget = tables[[2]] #The scraper found three tables; we only need the 2nd
View(budget)
#The table has rows that span multiple columns, which make the resulting output messy. I will leave it as an exercise to you to clean it up fully. For now I'll just fix the columns and also add a column with the district code.
colnames(budget) = c("category","gen_fund","gen_fund_pct", "gen_fund_per_student", "all_funds", "all_funds_percent", "all_funds_per_student")
url
budget$district_code = str_sub(url, start= -6) #Grab the last six digits of the URL
tea_scrape = function(district_code) {
url = paste0("https://rptsvr1.tea.texas.gov/cgi/sas/broker?_service=marykay&_program=sfadhoc.budget_report_2022.sas&_service=appserv&_debug=0&who_box=&who_list=", district_code)
print(paste0("scraping ", url))
webpage = read_html(url)
tables = html_nodes(webpage, "table") %>%
html_table()
budget = tables[[2]]
colnames(budget) = c("category","gen_fund","gen_fund_pct", "gen_fund_per_student", "all_funds", "all_funds_percent", "all_funds_per_student")
budget$district_code = str_sub(url, start= -6)
Sys.sleep(3) #Pause for three seconds to avoid overloading the server
return(budget)
}
tea_scrape("057905")
View(budget)
budget = tea_scrape("057905")
View(budget)
district_codes = c("101912", "057905", "031901")
all_budgets = data.frame()
count = 1
district_codes = c("101912", "057905", "031901")
all_budgets = data.frame()
count = 1
for (district_code in district_codes) {
print(count)
budget = tea_scrape(district_code)
all_budgets = rbind(all_budgets, budget)
count = count + 1
}
View(all_budgets)
View(budget)
url
all_budgets %>% filter(category == "Local Property Tax from M&O (excluding recapture)")
local_mo = all_budgets %>% filter(category == "Local Property Tax from M&O (excluding recapture)")
important_categories = c("Local Property Tax from M&O (excluding recapture)", "State Operating Funds", "Local Property Tax Recaptured")
important_categories = c("Local Property Tax from M&O (excluding recapture)", "State Operating Funds", "Local Property Tax Recaptured")
local_mo = all_budgets %>% filter(category %in% important_categories)
View(local_mo)
state_local = all_budgets %>% filter(category %in% important_categories)
??read_html
